(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var isUndefined = require('./isUndefined');
var isNull = require('./isNull');

/**
 * exist value.
 * value is not undefined and null.
 *
 * @param {*} val check value.
 * @return {Boolean}
 */
module.exports = function(val) {
  return !isUndefined(val) && !isNull(val);
};

},{"./isNull":2,"./isUndefined":3}],2:[function(require,module,exports){
/**
 * check null value
 *
 * @param {*} val check value.
 * @return {Boolean}
 */
module.exports = function(val) {
  return val === null;
};

},{}],3:[function(require,module,exports){
/**
 * check value is undefined.
 *
 * @param {*} val checked value.
 * @return {Boolean}
 */
module.exports = function(val) {
  return typeof val === 'undefined';
};

},{}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _existy = require('swsutils/src/existy');

var _existy2 = _interopRequireDefault(_existy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (el, key, orig) {
  if ((0, _existy2.default)(el) && el.hasAttribute(key)) {
    return el.getAttribute(key);
  }
  return orig;
};

},{"swsutils/src/existy":1}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _existy = require('swsutils/src/existy');

var _existy2 = _interopRequireDefault(_existy);

var _attr = require('./attr.js');

var _attr2 = _interopRequireDefault(_attr);

var _ripple = require('./ripple.js');

var _ripple2 = _interopRequireDefault(_ripple);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var makeBgImage = function makeBgImage(weight, fgColor, image) {
  if ((0, _existy2.default)(image)) {
    return image;
  }
  var c = fgColor.replace(/^#/, '');
  if (weight === 'bold') {
    return 'data:image/svg+xml;charset=utf8, %3Csvg version=%271.1%27 xmlns=%27http://www.w3.org/2000/svg%27 width=%2710px%27 height=%2710px%27%3E %3Cpolygon fill=%27%23' + c + '%27 stroke=%27none%27 points=%278.646,7.354 5,3.707 1.354,7.354 0.646,6.646 5,2.293 9.354,6.646%27 /%3E %3C/svg%3E';
  }
  return 'data:image/svg+xml;charset=utf8,%3Csvg version=%271.1%27 xmlns=%27http://www.w3.org/2000/svg%27 width=%2710px%27 height=%2710px%27%3E %3Cpolygon fill=%27%23' + c + '%27 stroke=%27none%27 points=%278.589,6.945 5,3.22 1.413,6.945 1.052,6.598 5,2.499 8.948,6.598%27 /%3E %3C/svg%3E';
};

exports.default = function (el, size, image) {
  var right = (0, _attr2.default)(el, 'data-sws-gotop-right', '50px');
  var bottom = (0, _attr2.default)(el, 'data-sws-gotop-bottom', '100px');
  var bottomGap = (0, _attr2.default)(el, 'data-sws-gotop-bottom-gap', '0px');
  var zIndex = (0, _attr2.default)(el, 'data-sws-gotop-z-index', 1000);
  var bgColor = (0, _attr2.default)(el, 'data-sws-gotop-bg-color', '#ffc966');
  var fgColor = (0, _attr2.default)(el, 'data-sws-gotop-fg-color', '#ffffff');
  var opacity = (0, _attr2.default)(el, 'data-sws-gotop-opacity', 1);
  var radius = (0, _attr2.default)(el, 'data-sws-gotop-radius', '50%');
  var weight = (0, _attr2.default)(el, 'data-sws-gotop-weight', 'normal');
  var rippleBg = (0, _attr2.default)(el, 'data-sws-gotop-ripple-color', 'rgba(255, 255, 255, .5)');

  // add ripple layer
  if (!(0, _existy2.default)(image)) {
    (0, _ripple2.default)(el);
  }

  // add style.
  var bgSize = (0, _existy2.default)(image) ? '100%' : '70%';
  return '\n#sws-gotop {\n  overflow: hidden;\n  position: fixed;\n  right: ' + right + ';\n  bottom: calc(' + bottom + ' - ' + bottomGap + ');\n  z-index: -1;\n  width: ' + size + 'px;\n  height: ' + size + 'px;\n  color: ' + fgColor + ';\n  background-color: ' + bgColor + ';\n  background-image: url("' + makeBgImage(weight, fgColor, image) + '");\n  background-repeat: no-repeat;\n  background-position: 50% 50%;\n  background-size: ' + bgSize + ' auto;\n  box-shadow: 1px 1px 2px rgba(0, 0, 0, .3);\n  opacity: 0;\n  border-radius: ' + radius + ';\n  cursor: pointer;\n  transition: none .2s ease-out 0s;\n  transition-property: opacity, bottom;\n}\n#sws-gotop.is-sws-gotop-active {\n  bottom: ' + bottom + ';\n  z-index: ' + zIndex + ';\n  opacity: 1;\n}\n#sws-gotop.is-sws-gotop-active:hover {\n  opacity: ' + opacity + ';\n}\n#sws-gotop .sws-gotop-ripple {\n  position: absolute;\n  width: ' + size * 2 + 'px;\n  height: ' + size * 2 + 'px;\n  background-color: ' + rippleBg + ';\n  border-radius: 50%;\n  transform: scale(0);\n  opacity: 0;\n  pointer-events: none;\n}\n#sws-gotop .sws-gotop-ripple.is-sws-gotop-ripple-animate {\n  animation: sws-gotop-ripple-animation .75s ease-out;\n}\n@keyframes sws-gotop-ripple-animation {\n  from {\n    opacity: 1;\n  }\n  to {\n    transform: scale(2);\n    opacity: 0;\n  }\n}\n';
};

},{"./attr.js":4,"./ripple.js":8,"swsutils/src/existy":1}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _attr = require('./attr.js');

var _attr2 = _interopRequireDefault(_attr);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var isMobile = function isMobile(el) {
  var width = (0, _attr2.default)(el, 'data-sws-gotop-mobile-width', 640);
  if (parseInt(width, 10) === 0) {
    return false;
  }
  return window.matchMedia('(max-width: ' + width + 'px)').matches;
};

exports.default = function (el) {
  var display = 'block';
  if (isMobile(el)) {
    display = 'none';
  }
  el.style.display = display;
};

},{"./attr.js":4}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _existy = require('swsutils/src/existy');

var _existy2 = _interopRequireDefault(_existy);

var _attr = require('./attr.js');

var _attr2 = _interopRequireDefault(_attr);

var _css = require('./css.js');

var _css2 = _interopRequireDefault(_css);

var _scroll = require('./scroll.js');

var _scroll2 = _interopRequireDefault(_scroll);

var _display = require('./display.js');

var _display2 = _interopRequireDefault(_display);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var KEY_ENTER = 13;

exports.default = function () {

  var elSwsGotop = document.getElementById('sws-gotop');

  if ((0, _existy2.default)(elSwsGotop)) {
    var boundary = (0, _attr2.default)(elSwsGotop, 'data-sws-gotop-boundary', 200);
    var size = parseInt((0, _attr2.default)(elSwsGotop, 'data-sws-gotop-size', 50), 10);
    var image = (0, _attr2.default)(elSwsGotop, 'data-sws-gotop-src', null);

    // add style.
    var elStyle = document.createElement('STYLE');
    elStyle.textContent = (0, _css2.default)(elSwsGotop, size, image);
    document.head.appendChild(elStyle);

    // scroll to top by click event.
    var elRipple = elSwsGotop.querySelector('.sws-gotop-ripple');
    elSwsGotop.addEventListener('click', function (e) {
      e.preventDefault();
      if ((0, _existy2.default)(elRipple)) {
        var rect = elSwsGotop.getBoundingClientRect();
        elRipple.style.left = e.clientX - rect.left - size + 'px';
        elRipple.style.top = e.clientY - rect.top - size + 'px';
        if (!elRipple.classList.contains('is-sws-gotop-ripple-animate')) {
          elRipple.classList.add('is-sws-gotop-ripple-animate');
          setTimeout(function () {
            elRipple.classList.remove('is-sws-gotop-ripple-animate');
          }, 750);
        }
      }
      (0, _scroll2.default)();
    }, false);

    // scroll to top by enter key down event.
    elSwsGotop.addEventListener('keydown', function (e) {
      e.preventDefault();
      if (e.keyCode === KEY_ENTER) {
        (0, _scroll2.default)();
      }
    }, false);

    // toggle display by scrolling.
    var requestID = void 0;
    window.addEventListener('scroll', function () {
      if (requestID) {
        cancelAnimationFrame(requestID);
      }
      var method = window.pageYOffset > boundary ? 'add' : 'remove';
      elSwsGotop.classList[method]('is-sws-gotop-active');
    }, false);

    // hide element with mobile device.
    window.addEventListener('resize', function () {
      (0, _display2.default)(elSwsGotop);
    }, false);
    (0, _display2.default)(elSwsGotop);
  }
};

},{"./attr.js":4,"./css.js":5,"./display.js":6,"./scroll.js":9,"swsutils/src/existy":1}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (el) {
  var elRipple = document.createElement('DIV');
  elRipple.classList.add('sws-gotop-ripple');
  el.appendChild(elRipple);
};

},{}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var SCROLL_SPEED = 1000;
var INTERVAL = 16;

var easing = function easing(t, b, c, d) {
  return c * ((t = t / d - 1) * t * t + 1) + b;
};

var scrollTo = function scrollTo(from, to) {
  var startTime = new Date();
  var distance = to - from;
  var intervalId = setInterval(function () {
    var time = new Date() - startTime;
    var current = easing(time, from, distance, SCROLL_SPEED);

    if (time > SCROLL_SPEED) {
      clearInterval(intervalId);
      current = from + distance;
    }

    window.scrollTo(0, current);
  }, INTERVAL);
};

var scroll = function scroll() {
  var from = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
  var to = 0;
  scrollTo(from, to);
};

exports.default = scroll;

},{}],10:[function(require,module,exports){
'use strict';

var _index = require('./index.js');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

document.addEventListener('DOMContentLoaded', _index2.default, false);

},{"./index.js":7}]},{},[10])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
